diff --git a/node_modules/@jambit/eslint-plugin-typed-redux-saga/index.js b/node_modules/@jambit/eslint-plugin-typed-redux-saga/index.js
index 1a3b4c4..4542672 100644
--- a/node_modules/@jambit/eslint-plugin-typed-redux-saga/index.js
+++ b/node_modules/@jambit/eslint-plugin-typed-redux-saga/index.js
@@ -4,5 +4,6 @@ module.exports = {
     rules: {
         'use-typed-effects': require('./rules/use-typed-effects'),
         'delegate-effects': require('./rules/delegate-effects'),
+        "yield-effects": require("./rules/yield-effects"),
     },
 };
diff --git a/node_modules/@jambit/eslint-plugin-typed-redux-saga/rules/yield-effects.js b/node_modules/@jambit/eslint-plugin-typed-redux-saga/rules/yield-effects.js
new file mode 100644
index 0000000..0149054
--- /dev/null
+++ b/node_modules/@jambit/eslint-plugin-typed-redux-saga/rules/yield-effects.js
@@ -0,0 +1,57 @@
+'use strict';
+
+const { createTracker } = require('../utils/tracker');
+
+module.exports = {
+    meta: {
+        type: 'problem',
+        docs: {
+            description: 'Enforces yield* in front of effects',
+            category: 'Possible Problems',
+            recommended: true,
+            url: 'https://github.com/jambit/eslint-plugin-typed-redux-saga/',
+        },
+        fixable: 'code',
+        hasSuggestions: true,
+        schema: [],
+    },
+    create(context) {
+        const tracker = createTracker();
+
+        return {
+            ImportDeclaration: tracker.enterImportDeclartion,
+            FunctionDeclaration: tracker.enterFunction,
+            'FunctionDeclaration:exit': tracker.exitFunction,
+            FunctionExpression: tracker.enterFunction,
+            'FunctionExpression:exit': tracker.exitFunction,
+            YieldExpression: tracker.enterYieldExpression,
+            'YieldExpression:exit': tracker.exitYieldExpression,
+
+            CallExpression(node) {
+                if (tracker.isNodeEffect(node)) {
+                    if (
+                        !tracker.isInYieldExpression() &&
+                        tracker.isInGenerator()
+                    ) {
+                        const effectName = tracker.getEffectName(node);
+                        context.report({
+                            node: node,
+                            message: effectName + ' effect must be yielded',
+                            suggest: [
+                                {
+                                    desc: 'Add yield*',
+                                    fix(fixer) {
+                                        return fixer.insertTextBefore(
+                                            node,
+                                            'yield* '
+                                        );
+                                    },
+                                },
+                            ],
+                        });
+                    }
+                }
+            },
+        };
+    },
+};
\ No newline at end of file
diff --git a/node_modules/@jambit/eslint-plugin-typed-redux-saga/utils/tracker.js b/node_modules/@jambit/eslint-plugin-typed-redux-saga/utils/tracker.js
new file mode 100644
index 0000000..c1f005a
--- /dev/null
+++ b/node_modules/@jambit/eslint-plugin-typed-redux-saga/utils/tracker.js
@@ -0,0 +1,76 @@
+'use strict';
+
+const knownEffects = Object.keys(require('typed-redux-saga'));
+
+function isEffectImport(value) {
+    return /^typed-redux-saga($|\/.*)/.test(value);
+}
+
+/**
+ * Builds state for tracking where an effect is being called.
+ */
+function createTracker() {
+    let inYieldDepth = 0;
+    let inGeneratorDepth = 0;
+    let effectLocalNames = [];
+    let effectImportedNames = [];
+
+    function getLocalNameIndex(node) {
+        let callee = node.callee;
+        return effectLocalNames.indexOf(callee.name);
+    }
+
+    return {
+        enterFunction(node) {
+            if (node.generator) {
+                ++inGeneratorDepth;
+            }
+        },
+        exitFunction(node) {
+            if (node.generator) {
+                --inGeneratorDepth;
+            }
+        },
+        enterYieldExpression() {
+            inYieldDepth += 1;
+        },
+        exitYieldExpression() {
+            inYieldDepth -= 1;
+        },
+        enterImportDeclartion(node) {
+            if (isEffectImport(node.source.value)) {
+                node.specifiers.forEach(function (specifier) {
+                    if (
+                        specifier.type === 'ImportSpecifier' &&
+                        knownEffects.indexOf(specifier.imported.name) !== -1
+                    ) {
+                        effectLocalNames.push(specifier.local.name);
+                        effectImportedNames.push(specifier.imported.name);
+                    }
+                });
+            }
+        },
+        isNodeEffect(node) {
+            return getLocalNameIndex(node) !== -1;
+        },
+        getEffectName(node) {
+            const callee = node.callee;
+            const localNameIndex = getLocalNameIndex(node);
+            const importedName = effectImportedNames[localNameIndex];
+            if (importedName !== callee.name) {
+                return `${callee.name} (${importedName})`;
+            }
+            return callee.name;
+        },
+        isInYieldExpression() {
+            return inYieldDepth !== 0;
+        },
+        isInGenerator() {
+            return inGeneratorDepth > 0;
+        },
+    };
+}
+
+module.exports = {
+    createTracker,
+};
\ No newline at end of file
