// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawExpressMessage {
  // msgId
  id             String          @id
  rawMessage     String
  createdAt      DateTime        @default(now()) @db.Timestamptz(3)
  expressMessage ExpressMessage?
  parsedUrl      String
  parsedMessage  String

  user   User   @relation(fields: [userId], references: [discordId])
  userId String
}

model ExpressMessage {
  rawMessage RawExpressMessage @relation(fields: [id], references: [id])
  id         String            @id

  expressUrl         String
  expressMessage     String
  verifiedAt         DateTime            @default(now()) @db.Timestamptz(3)
  user               User                @relation(fields: [userId], references: [discordId])
  userId             String
  contentCategory    ContentCategory     @relation(fields: [contentType], references: [contentType])
  contentType        String
  sbtSignatureRecord SBTSignatureRecord?

  // sBTSignatureRecordId String?
  SignaturePayload SignaturePayload?
}

model User {
  discordId    String  @id
  name         String
  ethAddress   String? @unique
  expressCount Int

  expressMessages     ExpressMessage[]
  sbtSignatureRecords SBTSignatureRecord[]
  RawExpressMessage   RawExpressMessage[]
}

model ContentCategory {
  contentType     String           @id
  ExpressMessages ExpressMessage[]
}

model SBTSignatureRecord {
  user   User   @relation(fields: [userId], references: [discordId])
  userId String

  expressMessage ExpressMessage @relation(fields: [id], references: [id])
  id             String         @id @unique

  sbtContractType   SBTContractType @relation(fields: [sbtContractTypeId], references: [id])
  sbtContractTypeId Int
  signedVC          String

  signaturePayload   SignaturePayload @relation(fields: [signaturePayloadId], references: [id])
  signaturePayloadId String           @unique
  signatureData      String
}

model SBTContractType {
  id                  Int                  @id @default(autoincrement())
  contractAddress     String
  name                String
  countLevel          Int[]
  imageLinks          String[]
  videoLinks          String[]
  chainId             Int
  sbtSignatureRecords SBTSignatureRecord[]
}

model SignaturePayload {
  // id                 Int                 @id @default(autoincrement())
  metadataURI        String
  receiverETHAddress String
  expressCount       Int
  sBTSignatureRecord SBTSignatureRecord?
  expressMessage     ExpressMessage      @relation(fields: [id], references: [id])
  id                 String              @id @unique
}

model NFT {
  id              Int      @id @default(autoincrement())
  contractAddress String
  name            String
  symbol          String
  imageLinks      String[]
  videoLinks      String[]
  chainId         Int
}

model Poap {
  id         Int      @id @default(autoincrement())
  eventId    Int
  name       String
  imageLinks String[]
  videoLinks String[]
  chainId    Int
}

model Gallery {
  id             Int      @id @default(autoincrement())
  typeName       String
  typeId         Int
  tags           String[]
  eventStartTime Int
  eventDuration  Int
}
