// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawExpressMessage {
  // msgId
  id             String          @id
  rawMessage     String
  createdAt      DateTime        @default(now()) @db.Timestamptz(3)
  expressMessage ExpressMessage?
  parsedUrl      String
  parsedMessage  String

  user   User   @relation(fields: [userId], references: [discordId])
  userId String
}

model ExpressMessage {
  rawMessage RawExpressMessage @relation(fields: [id], references: [id])
  id         String            @id

  expressUrl         String
  expressMessage     String
  verifiedAt         DateTime            @default(now()) @db.Timestamptz(3)
  user               User                @relation(fields: [userId], references: [discordId])
  userId             String
  contentCategory    ContentCategory     @relation(fields: [contentType], references: [contentType])
  contentType        String
  sbtSignatureRecord SBTSignatureRecord?

  // sBTSignatureRecordId String?
  SignaturePayload SignaturePayload?
}

model User {
  discordId    String  @id
  name         String
  ethAddress   String? @unique
  expressCount Int

  expressMessages     ExpressMessage[]
  sbtSignatureRecords SBTSignatureRecord[]
  RawExpressMessage   RawExpressMessage[]
}

model ContentCategory {
  contentType     String           @id
  ExpressMessages ExpressMessage[]
}

model SBTSignatureRecord {
  user   User   @relation(fields: [userId], references: [discordId])
  userId String

  expressMessage ExpressMessage @relation(fields: [id], references: [id])
  id             String         @id @unique

  sbtContractType   SBTContractType @relation(fields: [sbtContractTypeId], references: [id])
  sbtContractTypeId Int
  signedVC          String

  signaturePayload   SignaturePayload @relation(fields: [signaturePayloadId], references: [id])
  signaturePayloadId String           @unique
  signatureData      String
}

enum TokenType {
  ERC721
  ERC1155
}

model SignaturePayload {
  // id                 Int                 @id @default(autoincrement())
  metadataURI        String
  receiverETHAddress String
  expressCount       Int
  sBTSignatureRecord SBTSignatureRecord?
  expressMessage     ExpressMessage      @relation(fields: [id], references: [id])
  id                 String              @id @unique
}

enum GalleryItemType {
  poap
  nft
  sbt
}

enum MainViewType {
  image
  video
  wordart
}

model GalleryItemBase {
  id             Int          @id @default(autoincrement())
  name           String
  itemText       String[]
  coverLink      String
  mainViewType   MainViewType @default(image)
  imageLinks     String[]
  videoLinks     String[]
  chainId        Int
  tags           String[]
  tokenType      TokenType    @default(ERC721)
  tokenId        String? //1155 token id
  eventStartTime Int
  eventDuration  Int?

  galleryItemType GalleryItemType
  onShelf         Boolean
  infoDetail      Json?

  SBTContractType SBTContractType?
  NFT             NFT?
  Poap            Poap?
}

model SBTContractType {
  id                  Int             @id @default(autoincrement())
  contractAddress     String
  contractName        String
  version             String
  chainId             Int
  galleryItemBase     GalleryItemBase @relation(fields: [galleryItemBaseId], references: [id])
  galleryItemBaseId   Int             @unique
  metaDataName        String
  metaDataDescription String
  issuerAddress       String

  countLevel Int[]

  sbtSignatureRecords SBTSignatureRecord[]
}

enum NFTAppType {
  PERSENT
  DELIVERY
}

model NFTDeliveryData {
  merkleUrl       String
  contractAddress String
  tokenType       TokenType @default(ERC721)
  tokenId         String? //1155 token id
  nft             NFT       @relation(fields: [id], references: [id])
  id              Int       @id @unique
}

model NFT {
  id                Int             @id @default(autoincrement())
  contractAddress   String
  galleryItemBase   GalleryItemBase @relation(fields: [galleryItemBaseId], references: [id])
  galleryItemBaseId Int             @unique

  symbol          String
  nftAppType      NFTAppType       @default(PERSENT)
  nftDeliveryData NFTDeliveryData?
}

model Poap {
  id                Int             @id @default(autoincrement())
  contractAddress   String?
  poapEventId       Int
  galleryItemBase   GalleryItemBase @relation(fields: [galleryItemBaseId], references: [id])
  galleryItemBaseId Int             @unique
}
